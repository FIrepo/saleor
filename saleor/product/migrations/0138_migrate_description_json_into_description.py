# Generated by Django 3.1 on 2021-01-07 11:59

import re
import warnings

from django.db import migrations
from django.db.models import F
from urllib3.util import parse_url

import saleor.core.db.fields

BLACKLISTED_URL_SCHEMES = ("javascript",)
HYPERLINK_TAG_WITH_URL_PATTERN = r"(.*?<a\s+href=\\?\")(\w+://\S+[^\\])(\\?\">)"


def clean_editor_js(definitions: dict):
    """Sanitize a given EditorJS JSON definitions.

    Look for not allowed URLs, replaced them with `invalid` value, and clean valid ones.
    """
    blocks = definitions.get("blocks")

    if not blocks or not isinstance(blocks, list):
        return definitions

    for index, block in enumerate(blocks):
        block_type = block["type"]
        data = block.get("data")
        if not data or not isinstance(data, dict):
            continue

        if block_type == "list":
            for item_index, item in enumerate(block["data"]["items"]):
                if not item:
                    continue
                new_text = clean_text_data(item)
                blocks[index]["data"]["items"][item_index] = new_text
        else:
            text = block["data"]["text"]
            if not text:
                continue
            new_text = clean_text_data(text)
            blocks[index]["data"]["text"] = new_text

    return definitions


def clean_text_data(text: str):
    """Look for url in text, check if URL is allowed and return the cleaned URL.

    By default, only the protocol ``javascript`` is denied.
    """

    if not text:
        return

    end_of_match = 0
    new_text = ""
    for match in re.finditer(HYPERLINK_TAG_WITH_URL_PATTERN, text):
        original_url = match.group(2)
        original_url.strip()

        url = parse_url(original_url)
        new_url = url.url
        if url.scheme in BLACKLISTED_URL_SCHEMES:
            warnings.warn(
                f"An invalid url was sent: {original_url} "
                f"-- Scheme: {url.scheme} is blacklisted"
            )
            new_url = "#invalid"

        new_text += match.group(1) + new_url + match.group(3)
        end_of_match = match.end()

    if end_of_match:
        new_text += text[end_of_match:]

    return new_text if new_text else text


def clean_description_field(apps, schema_editor):
    Category = apps.get_model("product", "Category")
    CategoryTranslation = apps.get_model("product", "CategoryTranslation")
    Collection = apps.get_model("product", "Collection")
    CollectionTranslation = apps.get_model("product", "CollectionTranslation")
    Product = apps.get_model("product", "Product")
    ProductTranslation = apps.get_model("product", "ProductTranslation")

    models = [
        Category,
        CategoryTranslation,
        Collection,
        CollectionTranslation,
        Product,
        ProductTranslation,
    ]

    for model in models:
        model.objects.all().update(description="{}")


def migrate_description_json_into_description_field(apps, schema_editor):
    Category = apps.get_model("product", "Category")
    CategoryTranslation = apps.get_model("product", "CategoryTranslation")
    Collection = apps.get_model("product", "Collection")
    CollectionTranslation = apps.get_model("product", "CollectionTranslation")
    Product = apps.get_model("product", "Product")
    ProductTranslation = apps.get_model("product", "ProductTranslation")

    models = [
        Category,
        CategoryTranslation,
        Collection,
        CollectionTranslation,
        Product,
        ProductTranslation,
    ]

    for model in models:
        model.objects.all().update(description=F("description_json"))


class Migration(migrations.Migration):

    dependencies = [
        ("product", "0137_drop_attribute_models"),
    ]

    operations = [
        migrations.RunPython(
            clean_description_field,
            migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="category",
            name="description",
            field=saleor.core.db.fields.SanitizedJSONField(
                blank=True,
                default=dict,
                sanitizer=clean_editor_js,
            ),
        ),
        migrations.AlterField(
            model_name="categorytranslation",
            name="description",
            field=saleor.core.db.fields.SanitizedJSONField(
                blank=True,
                default=dict,
                sanitizer=clean_editor_js,
            ),
        ),
        migrations.AlterField(
            model_name="collection",
            name="description",
            field=saleor.core.db.fields.SanitizedJSONField(
                blank=True,
                default=dict,
                sanitizer=clean_editor_js,
            ),
        ),
        migrations.AlterField(
            model_name="collectiontranslation",
            name="description",
            field=saleor.core.db.fields.SanitizedJSONField(
                blank=True,
                default=dict,
                sanitizer=clean_editor_js,
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="description",
            field=saleor.core.db.fields.SanitizedJSONField(
                blank=True,
                default=dict,
                sanitizer=clean_editor_js,
            ),
        ),
        migrations.AlterField(
            model_name="producttranslation",
            name="description",
            field=saleor.core.db.fields.SanitizedJSONField(
                blank=True,
                default=dict,
                sanitizer=clean_editor_js,
            ),
        ),
        migrations.RunPython(
            migrate_description_json_into_description_field,
            migrations.RunPython.noop,
        ),
    ]
